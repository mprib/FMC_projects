%% Model testing
% The Matlab function |das3test.m| contains code for testing of the model.
% As a user of the model, you may want to test the model to verify
% that it works as it should, or you may want to see the effect of a change
% in model parameters in a well-defined test rather than in a real-time
% simulation.

%% Visualization test
%
% The model is placed in a state where all joint angles (*q*) are zero, the
% forward kinematic model is executed and the resulting pose is visualized.
% The result should be Figure 1.  You can use the zoom and rotate tools at
% the top of the Figure window for a closer inspection.
%
% At this point, the user is asked to press the Enter key to successively more all joints.
% This is shown for the first two DOFs in figure 6.
% The visualization test verifies that the kinematic model is coded correctly.
%
% To execute this test, type:
das3test('vis')
%%
% 
%  Figure 1: Result of visualization test.
% 
%% Speed test
%
% During this test, the MEX function that contains the model dynamics is executed many times
% with random inputs, and the time per execution is reported on the screen.
%
% It is best to do this when no other process is running on the computer.
%%
% To execute this test, type:
das3test('speed')
%%
% The second line reports the computation speed that is due to only the
% muscle and joint models, without multibody dynamics.  This shows that the
% computation time is mostly due to the multibody dynamics.
%
%% Moment arm test
% This test verifies that the muscle path models are working correctly.
% Each joint angle is set at the midpoint of its range of motion, all
% muscle moment arms are calculated, and at each joint, the muscle with the
% largest positive or negative moment arm is reported.
%
% To execute this test, type:
das3test('moment arms')
%%
% 
%  Figure 2: Moment arm matrix generated by das3test('moment arms').
% 
%%
% A figure will show the nonzero elements of the moment arm matrix (Figure
% 2).  The moment arm matrix, with the names of the degrees of freedom and
% muscles, and moment arms in mm, is also written on the file
% |momentarms.csv| which can be examined in Excel or other spreadsheet
% software.
%% Equilibrium test
% This test finds the passive equilibrium of the model.  Equilibrium
% implies that the state derivatives dx/dt are zero.  Passive implies that
% the muscle excitations *u* are zero. 
%
% The solution is found by an iterative solver.  
% When the equilibrium is found, Matlab reports 
% joint variables, muscle variables and glenohumeral stability for this equilibrium. 
%
% In addition, the linearized dynamics are
% examined at equilibrium, by eigenvalue analysis. The magnitude of the
% eigenvalues tells us how fast the dynamics are.  If there are eigenvalues
% with a magnitude of $10^6$, which corresponds to a microsecond time
% scale, this means that the differential equation is stiff and requires implicit
% methods for simulation. The real parts of all eigenvalues have to be negative
% for the equilibrium to be stable.  
%
% To execute this test, type:
das3test('equilibrium')
%%
% 
%  Figure 3: Passive equilibrium posture and eigenvalues of the dynamic model. Note the logarithmic real axis.
% 

%%
% Note that this is for a passive equilibrium state.  The eigenvalues will probably be larger when
% muscles are generating force and tendons contribute to joint stiffness.

%% Simulation test with real-time solver
%
% The system is simulated with the first-order Rosenbrock solver. This
% is a fixed-step solver that is suitable for real-time.
%
% At t=0, the model is in its equilibrium state, which is obtained from the
% file equilibrium.mat.  It is therefore important that you have first done
% the equilibrium test with the same model.  The muscle excitations u are
% then ramped up to reach a maximum (1.0) at t=0.5.  
%
% To execute this test, type:
%
% 	>> das3test(‘simulate’, stepsize)
%
% If stepsize is omitted, a stepsize of 0.003 seconds is used.  When the
% simulation is completed, it displays the result and
% writes the result in files simulation.mat (full state x as function
% of time) and simulation.sto (skeleton pose q as function of time, for
% animation with Opensim).
%
% The results of this simulation are compared to the results from the
% ode15s test.  It is therefore important that test(‘ode15s’) has already
% been completed with the same model. (The results of ode15s are included
% in the release: |ode15s_simulation.mat| (full state x as function of time) and
% |ode15s_simulation.sto| (q as function of time, to visualize simulated
% movement in OpenSim). Differences are reported as RMS error in each joint angle.
das3test('simulate')

%% 
% *The rest of the tests are quite slow (an hour or more) so please allow enough time.* 
%

%% Simulation test with Matlab solver
%
% The system can be simulated with a Matlab differential equation solver.
% This is slow, but we know it is accurate because the Matlab solver will
% control its time steps to remain below the specified error tolerance.
% Because it is a stiff system, we use the ode15s solver which is an
% implicit variable step method.
%
% At t=0, the model is in its equilibrium state, which is obtained from the
% file equilibrium.mat.  It is therefore important that you have first done
% the equilibrium test with the same model.  The muscle excitations u are
% then ramped up to reach a maximum (1.0) at t=0.5.  
%
% To execute this test, type:
%
% 	>> das3test(‘ode15s’)
%
% At each time step of the simulation, the state derivative $\dot \textbf{x}$ will be
% solved numerically, which is time consuming.  Due to the
% variable step, computation time is unpredictable (this is why this solver
% is not suitable for real time) and can be several minutes up to an hour.
% At regular intervals, the test will report its progress, and some
% verification that the condition f=0 is being maintained:
%%
% 
%  Step 784511: Neval = 1202744 -- t =      2.8126797952592 -- Norm(f) = 2.197e-016
% 
% The simulated movements are reported as graphs (Figure 4) and also saved
% in files |ode15s_simulation.mat| (full state x as function of time) and
% |ode15s_simulation.sto| (q as function of time, to visualize simulated
% movement in OpenSim).
%
% <<simulation.png>>
%
%%
% 
%  Figure 4: Result of movement simulation test.
% 
% To see the simulated movement in OpenSim: (1) Start OpenSim, (2)
% File->Open Model..., select the model |das3.osim|, (3) File->Load
% Motion..., select the motion file ode |ode15s_simulation.sto|.  Then use
% the playback controls in top right of window to show the movement.

%% Isometric muscle tests
%
% This test produces isometric moment-angle curves (figure 5) for a joint, one 
% for each value in a range of angles in a second joint.
%
% To execute this test, type:
%
%   >> das3test('isometric')
%
% <<isometric.png>>
%
%%
%  Figure 5: Isometric moment-angle curves for forearm
%  pronation/supination, one for each value in a range of angles of elbow
%  flexion/extension
%
%% 
% You can also produce one isometric moment-angle curve (figure 6) for each muscle 
% that crosses a joint.
%
% To execute this test, type:
%
%   >> das3test('isometric1')
%
% <<isometric1.png>>
%
%%
%
% Figure 6: Isometric moment-angle curve for all muscles crossing ACy
%
%% Isokinetic muscle test
%
% This test produces isokinetic moment-angular velocity curves for a joint.
%
% To execute this test, type:
%
%   >> das3test('isokinetic')
%
% <<isokinetic.png>>
%
%%
%
%  Figure 7: Isokinetic moment-angular velocity curve for SCz
%


%%
% <html> 
% <b>Previous:</b> <a href="das3doc_model.html">Model reference</a><br>
% <b>Home:</b> <a href="../das3doc_main.html">Main</a>
% </html>
%